# Refernece sung kim youtube channel

import tensorflow as tf
import random
import matplotlib.pyplot as plt
import pandas as pd
tf.set_random_seed(777)  # for reproducibility
from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)
nb_classes = 10

# MNIST data image of shape 28 * 28 = 784
X = tf.placeholder(tf.float32, [None, 784])
# 0 - 9 digits recognition = 10 classes
Y = tf.placeholder(tf.float32, [None, nb_classes])

W1 = tf.get_variable("W1", shape=[784, 196], initializer=tf.keras.initializers.he_normal())
b1 = tf.Variable(tf.zeros([196]))
W2 = tf.get_variable("W2", shape=[196, 49], initializer=tf.keras.initializers.he_normal())
b2 = tf.Variable(tf.zeros([49]))
W3 = tf.get_variable("W3", shape=[49, nb_classes], initializer=tf.keras.initializers.he_normal())
b3 = tf.Variable(tf.zeros([nb_classes]))

# Hypothesis (using softmax)
hidden_0 = tf.nn.relu(tf.matmul(X, W1) + b1)
hidden_1 = tf.nn.relu(tf.matmul(hidden_0, W2) + b2)
hypothesis = tf.nn.softmax(tf.matmul(hidden_1, W3) + b3)

cost = tf.reduce_mean(-tf.reduce_sum(Y * tf.log(hypothesis), axis=1))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.05).minimize(cost)

# Test model
is_correct = tf.equal(tf.argmax(hypothesis, 1), tf.argmax(Y, 1))
# Calculate accuracy
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

# parameters
training_epochs = 100
batch_size = 100
with tf.Session() as sess:
    # Initialize TensorFlow variables
    sess.run(tf.global_variables_initializer())
    # Training cycle
    for epoch in range(training_epochs):
        avg_cost = 0
        total_batch = int(mnist.train.num_examples / batch_size)

        for i in range(total_batch):
            batch_xs, batch_ys = mnist.train.next_batch(batch_size)
            c, _ = sess.run([cost, optimizer], feed_dict={
                            X: batch_xs, Y: batch_ys})
            avg_cost += c / total_batch

        print('Epoch:', '%04d' % (epoch + 1),
              'cost =', '{:.9f}'.format(avg_cost))

    print("Learning finished")

    # Test the model using test sets
    print("Accuracy: ", accuracy.eval(session=sess, feed_dict={
          X: mnist.test.images, Y: mnist.test.labels}))

    #wrong predicted data analyze
    index = []
    ori = []
    predict = []
    labels = sess.run(tf.argmax(mnist.test.labels, 1))
    predictions = sess.run(tf.argmax(hypothesis, 1), feed_dict={X: mnist.test.images})
    for i in range(0, mnist.test.num_examples):
        if labels[i] != predictions[i]:
            index.append(i)
            ori.append(labels[i])
            predict.append(predictions[i])

    wrong_result = pd.DataFrame({'label':ori, 'predict':predict}, index=index)
    wrong_result.head()

    #matplot histogram
    plt.figure(figsize=(12, 6))
    plt.hist(wrong_result['predict'], bins=10)
    plt.xlabel('wrong_prediction')
    plt.grid()
    plt.show()


    # Get 4 samples and predict
    r = random.randint(0, mnist.test.num_examples - 1)
    print("Test_Label: ", sess.run(tf.argmax(mnist.test.labels[r:r + 4], 1)))
    print("Test_Prediction: ", sess.run(
        tf.argmax(hypothesis, 1), feed_dict={X: mnist.test.images[r:r + 4]}))
    t1 = mnist.test.images[r:r + 1].reshape(28, 28)
    for i in range(3):
      t1 = tf.concat([t1, mnist.test.images[r+i+1:r + i+2].reshape(28, 28)], axis=0)
    plt.imshow(t1.eval(),
        cmap='Greys',
        interpolation='nearest')
    plt.show()
